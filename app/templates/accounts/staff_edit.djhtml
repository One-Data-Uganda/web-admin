{% extends "layout_modal.djhtml" %}
{% from "fields.djhtml" import render_field, render_label, render_simple_field %}

{% block content %}
    <form id="userForm">
        <div class="modal-header">
            <h5 class="modal-title" id="userModalLabel">Add/Edit Admin</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
            </button>
        </div>
        <div class="modal-body">
            {{ form.csrf_token() }}
            {{ form.id }}
            <div class="form-body">
                {{ render_field(form.first_name) }}
                {{ render_field(form.last_name) }}
                <div class="form-group row mb-3">
                    <label for="{{ form.dob.name }}" class="col-md-3 text-right col-form-label font-weight-bolder ">
                        {{ render_label(form.dob) }}
                    </label>
                    <div class="col-md-3">
                        {{ render_simple_field(form.dob, type="dob")}}
                    </div>
                    <label for="{{ form.gender.name }}" class="col-md-3 text-right col-form-label font-weight-bolder ">
                        {{ render_label(form.gender) }}
                    </label>
                    <div class="col-md-3">
                        {{ render_simple_field(form.gender, type="radio") }}
                    </div>
                </div>
                <div class="form-group row mb-3">
                    <label for="{{ form.msisdn.name }}" class="col-md-3 text-right col-form-label font-weight-bolder ">
                        {{ render_label(form.msisdn) }}
                    </label>
                    <div class="col-md-3">
                        {{ form.country_id(class="form-select form-select-sm", data_control="select2", data_dropdown_parent="#ajax-modal", data_placeholder="Select a country") }}
                    </div>
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text fs-fluid" id="country_code" name="country_code"></span>
                            {{ render_simple_field(form.msisdn) }}
                        </div>
                    </div>
                </div>
                {{ render_field(form.email) }}
                <div class="form-group row mb-3" data-kt-password-meter="true">
                    <label for="{{ form.password.name }}" class="col-md-3 text-right col-form-label font-weight-bolder ">
                        {{ render_label(form.password) }}
                    </label>
                    <div class="col-md-9">
                        {{ render_simple_field(form.password, autocomplete="new-password") }}
                        <small>Leave blank to retain old password</small>
                    </div>
                </div>
                <div class="form-group row mb-3">
                    <label for="{{ form.admin_group_id.name }}" class="col-md-3 text-right col-form-label font-weight-bolder ">
                        {{ render_label(form.admin_group_id) }}
                    </label>
                    <div class="col-md-9">
                        {{ render_simple_field(form.admin_group_id, type="select") }}
                    </div>
                </div>
                {% if not form.id.data %}
                    <div class="form-group row mb-3">
                        <div class="col-md-3">&nbsp;</div>
                        <div class="col-md-9">
                            <label>
                                {{ render_simple_field(form.activation_email) }} Send Activation Email
                            </label>
                        </div>
                    </div>
                {% endif  %}
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-sm btn-danger font-weight-bold" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-sm btn-primary font-weight-bold" id="save-user">Save changes</button>
        </div>
    </form>
{% endblock %}

{% block additionalscripts %}
    <script>
     "use strict";

     var extraButtons;
     var validation;
     var target = document.querySelector("#ajax-modal");
     var blockModal;

     blockModal = KTBlockUI.getInstance(target);

     if (!blockModal) {
         blockModal = new KTBlockUI(target);
     }

     var _handleUserActions = function() {
         var e = document.querySelector("#userForm");
         var passwordMeterElement = document.querySelector('#password-meter');
         var passwordMeter = new KTPasswordMeter(passwordMeterElement);
         validation = FormValidation.formValidation(
             e,
             {
                 fields: {
                     name: {
                         validators: {
                             notEmpty: {
                                 message: 'Name is required'
                             },
                         }
                     },
                     username: {
                         validators: {
                             notEmpty: {
                                 message: 'Username is required'
                             },
                         }
                     },
                     email: {
                         validators: {
                             notEmpty: {
                                 message: 'Registration Number is required'
                             },
                             emailAddress: {
                                 message: 'The value is not a valid email address'
                             }
                         }
                     },
                     dob: {
                         validators: {
                             notEmpty: {
                                 message: 'Please enter the date of birth'
                             },
                         }
                     },
                     gender: {
                         validators: {
                             notEmpty: {
                                 message: 'Please select a gender'
                             },
                         }
                     },
                     msisdn: {
                         validators: {
                             notEmpty: {
                                 message: 'Telephone is required'
                             },
                             checkPhone: {
                                 message: "The phone number is not valid for the selected country"
                             }
                         }
                     },
                     admin_group_id: {
                         validators: {
                             notEmpty: {
                                 message: 'Please select a group'
                             },
                         }
                     },
                     password: {
                         validators: {
                             {% if form.id.data == 0 %}
                             notEmpty: {
                                 message: 'Please enter a password'
                             },
                             {% endif %}
                             callback: {
                                 message: "Please enter valid password",
                                 callback: function (e) {
                                     if (e.value.length > 0) {
                                         return passwordMeter.getScore() >= 75;
                                     }
                                 },
                             },
                         }
                     },
                 },
                 plugins: {
                     trigger: new FormValidation.plugins.Trigger(),
                     submitButton: new FormValidation.plugins.SubmitButton(),
                     // defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation
                     bootstrap: new FormValidation.plugins.Bootstrap5()
                 }
             }
         ).on('core.form.valid', function () {
             blockModal.block();

             console.log('serializing');
             var data = $("#userForm").serialize();
             console.log(data);
             $.post("{{ url_for('accounts.staffEdit') }}", data, function(r, s) {
                 blockModal.release();
                 if (r.success) {
                     swal.fire({
                         text: "Successfully saved user",
                         icon: "success",
                         buttonsStyling: false,
                         confirmButtonText: "Ok",
                         customClass: {
                             confirmButton: "btn btn-sm font-weight-bold btn-light-primary"
                         }
                     });
                     UserTable.reload();
                     $('#ajax-modal').modal('hide')
                 } else {
                     swal.fire({
                         text: r.message,
                         icon: "error",
                         buttonsStyling: false,
                         confirmButtonText: "Ok",
                         customClass: {
                             confirmButton: "btn btn-sm font-weight-bold btn-light-primary"
                         }
                     });
                 }
             });
         });
         e.querySelector('input[name="password"]').addEventListener("input", function () {
             this.value.length > 0 && validation.updateFieldStatus("password", "NotValidated");
         });
     }

     // Class Definition
     var User = function() {
         // Public Functions
         return {
             // public functions
             init: function() {
                 _handleUserActions();
             }
         };
     }();

     $(document).ready(function(){
         User.init();

         $("#country_id").on("change", function() {
             console.log('{{ form.country_id.data }}');
             var r = $(this).children("option:selected").data("calling-code");
             console.log(r);
             $("#country_code").text("+"+r);
         });

         $("#admin_group_id").val({{ form.admin_group_id.data}}).change();

         $("#country_id").trigger("change");

         $("#gender-{{form.gender.data}}").click();

         $('#dob').daterangepicker({
             singleDatePicker: true,
             showDropdowns: true,
             autoApply: true,
             minYear: 1950,
             maxYear: parseInt(moment().subtract(18, 'year').format("YYYY")),
             {% if form.dob.data %}
             startDate: "{{ form.dob.data }}",
             {% else %}
             startDate: moment().subtract(18, 'year').format("YYYY-MM-DD"),
             {% endif %}
             maxDate: moment().subtract(18, 'year').format("YYYY-MM-DD"),
             locale: {
                 format: 'YYYY-MM-DD'
             }
         });
     });
    </script>
{% endblock %}

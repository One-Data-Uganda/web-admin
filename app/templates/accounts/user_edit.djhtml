{% extends "layout_modal.djhtml" %}
{% from "fields.djhtml" import render_field, render_label, render_simple_field %}

{% block content %}
    <form id="userForm">
        <div class="modal-header">
            <h5 class="modal-title" id="userModalLabel">Add/Edit User</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"> </button>
        </div>
        <div class="modal-body">
            {{ form.csrf_token() }}
            {{ form.id }}
            <div class="form-body">
                <div class="form-group row">
                    <label for="{{ form.first_name.name }}" class="col-md-3 text-right col-form-label font-weight-bolder ">
                        {{ render_label(form.first_name) }}
                    </label>
                    <div class="col-md-3">
                        <div class="input-group mb-3">
                            {{ render_simple_field(form.first_name) }}
                        </div>
                    </div>
                    <label for="{{ form.last_name.name }}" class="col-md-2 text-right col-form-label font-weight-bolder ">
                        {{ render_label(form.last_name) }}
                    </label>
                    <div class="col-md-4">
                        <div class="input-group mb-3">
                            {{ render_simple_field(form.last_name) }}
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="{{ form.gender.name }}" class="col-md-3 text-right col-form-label font-weight-bolder ">
                        {{ render_label(form.gender) }}
                    </label>
                    <div class="col-md-3">
                        {{ render_simple_field(form.gender, type="radio") }}
                    </div>
                    <label for="{{ form.dob.name }}" class="col-md-2 text-right col-form-label font-weight-bolder ">
                        {{ render_label(form.dob) }}
                    </label>
                    <div class="col-md-4">
                        <div class="input-group mb-3">
                            {{ render_simple_field(form.dob, type="dob") }}
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="{{ form.country_id.name }}" class="col-md-3 text-right col-form-label font-weight-bolder ">
                        {{ render_label(form.country_id)}}
                    </label>
                    <div class="col-md-3">
                        {{ form.country_id(class="form-select form-select-sm", data_control="select2", data_placeholder="Select a country", data_dropdown_parent="#ajax-modal" ) }}
                    </div>
                    <label for="{{ form.msisdn_1.name }}" class="col-md-2 text-right col-form-label font-weight-bolder ">
                        {{ render_label(form.msisdn_1) }}
                    </label>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text fs-fluid" id="country_code" name="country_code"></span>
                            {{ render_simple_field(form.msisdn_1) }}
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="{{ form.email_1.name }}" class="col-md-3 text-right col-form-label font-weight-bolder ">
                        {{ render_label(form.email_1) }}
                    </label>
                    <div class="col-md-9">
                        {{ render_simple_field(form.email_1, autocomplete="new-email") }}
                    </div>
                </div>
                <div class="form-group row">
                    <label for="{{ form.password.name }}" class="col-md-3 text-right col-form-label font-weight-bolder ">
                        {{ render_label(form.password) }}
                    </label>
                    <div class="col-md-9" id="password-meter">
                        <!--begin::Input wrapper-->
                        <div class="position-relative mb-3">
                            {{ form.password(class="form-control form-control-sm") }}
                            <span class="btn btn-sm btn-icon position-absolute translate-middle top-50 end-0 me-n2" data-kt-password-meter-control="visibility">
                                <i class="bi bi-eye-slash fs-2"></i>
                                <i class="bi bi-eye fs-2 d-none"></i>
                            </span>
                        </div>
                        <!--end::Input wrapper-->
                        <!--begin::Meter-->
                        <div class="d-flex align-items-center mb-3" data-kt-password-meter-control="highlight">
                            <div class="flex-grow-1 bg-secondary bg-active-success rounded h-5px me-2"></div>
                            <div class="flex-grow-1 bg-secondary bg-active-success rounded h-5px me-2"></div>
                            <div class="flex-grow-1 bg-secondary bg-active-success rounded h-5px me-2"></div>
                            <div class="flex-grow-1 bg-secondary bg-active-success rounded h-5px"></div>
                        </div>
                        <!--end::Meter-->
                        <!--end::Wrapper-->
                        <!--begin::Hint-->
                        <div class="text-muted">Use 8 or more characters with a mix of lower-case and upper-case letters, numbers &amp; symbols.</div>
                        <!--end::Hint-->
                    </div>
                </div>
                {{ render_field(form.account_group_id, type="select") }}
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-sm btn-danger font-weight-bold" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-sm btn-primary font-weight-bold" id="save-user">Save changes</button>
        </div>
    </form>
{% endblock %}

{% block additionalscripts %}
    <script>
     "use strict";

     var extraButtons;
     var validation;
     var target = document.querySelector("#ajax-modal");
     var blockModal;

     blockModal = KTBlockUI.getInstance(target);

     if (!blockModal) {
         blockModal = new KTBlockUI(target);
     }

     var _handleUserActions = function() {
         var e = document.querySelector("#userForm");
         var passwordMeterElement = document.querySelector('#password-meter');
         var passwordMeter = new KTPasswordMeter(passwordMeterElement);
         // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/
         validation = FormValidation.formValidation(
             e,
             {
                 fields: {
                     first_name: {
                         validators: {
                             notEmpty: {
                                 message: 'First Name is required'
                             },
                         }
                     },
                     last_name: {
                         validators: {
                             notEmpty: {
                                 message: 'Last Name is required'
                             },
                         }
                     },
                     account_group_id: {
                         validators: {
                             notEmpty: {
                                 message: 'user Group is required'
                             },
                         }
                     },
                     email_1: {
                         validators: {
                             notEmpty: {
                                 message: 'Registration Number is required'
                             },
                             emailAddress: {
                                 message: 'The value is not a valid email address'
                             }
                         }
                     },
                     msisdn_1: {
                         validators: {
                             checkPhone: {
                                 message: "The phone number is not valid for the selected country"
                             },
                             remote: {
                                 message: 'This telephone number is already registered',
                                 method: 'GET',
                                 name: 'msisdn',
                                 url: '{{ url_for("base.check_msisdn_user") }}',
                                 data: function() {
                                     return {
                                         id: "{{ kyc_id }}",
                                         country_id: $("#country_id").val()
                                     }
                                 }
                             }
                         }
                     },
                     dob: {
                         validators: {
                             notEmpty: {
                                 message: 'Please enter the date of birth'
                             },
                         }
                     },
                     password: {
                         validators: {
                             {% if form.id.data == 0 %}
                             notEmpty: {
                                 message: 'Please enter a password'
                             },
                             {% endif %}
                             callback: {
                                 message: "Please enter valid password",
                                 callback: function (e) {
                                     if (e.value.length > 0) {
                                         return passwordMeter.getScore() >= 75;
                                     }
                                 },
                             },
                         }
                     },
                 },
                 plugins: {
                     trigger: new FormValidation.plugins.Trigger(),
                     submitButton: new FormValidation.plugins.SubmitButton(),
                     // defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation
                     bootstrap: new FormValidation.plugins.Bootstrap5()
                 }
             }
         ).on('core.form.valid', function () {
             blockModal.block();

             var data = $("#userForm").serialize();

             $.post("{{ url_for('accounts.userChange', account_id=id) }}", data, function(r, s) {
                 blockModal.release();
                 if (r.success) {
                     swal.fire({
                         text: "Successfully saved user",
                         icon: "success",
                         buttonsStyling: false,
                                 confirmButtonText: "Ok",
                         customClass: {
                             confirmButton: "btn btn-sm font-weight-bold btn-light-primary"
                         }
                     });
                     UserTable.reload();
                     $('#ajax-modal').modal('hide')
                 } else {
                     swal.fire({
                         text: r.message,
                         icon: "error",
                         buttonsStyling: false,
                         confirmButtonText: "Ok",
                         customClass: {
                             confirmButton: "btn btn-sm font-weight-bold btn-light-primary"
                         }
                     });
                 }
             });
         });
         e.querySelector('input[name="password"]').addEventListener("input", function () {
             this.value.length > 0 && validation.updateFieldStatus("password", "NotValidated");
         });
     }

     // Class Definition
     var User = function() {
         // Public Functions
         return {
             // public functions
             init: function() {
                 _handleUserActions();
             }
         };
     }();

     $(document).ready(function(){
         User.init();

         $("#gender-{{form.gender.data}}").click();
         console.log($("#dob").val());

         $("#country_id").on("change", function() {
             var r = $(this).children("option:selected").data("calling-code");
             if ( typeof r !== 'undefined' ) {
                 $("#country_code").text("+"+r);
             }
         });

         $("#country_id").val('{{ form.country_id.data }}').trigger("change");

         $("#account_group_id").val('{{ form.account_group_id.data }}');

         $('#dob').daterangepicker({
             singleDatePicker: true,
             showDropdowns: true,
             autoApply: true,
             minYear: 1950,
             maxYear: parseInt(moment().subtract(18, 'year').format("YYYY")),
             {% if form.dob.data %}
             startDate: "{{ form.dob.data }}",
             {% else %}
             startDate: moment().subtract(18, 'year').format("YYYY-MM-DD"),
             {% endif %}
             maxDate: moment().subtract(18, 'year').format("YYYY-MM-DD"),
             locale: {
                 format: 'YYYY-MM-DD'
             }
         });
     });
    </script>
{% endblock %}
